name: End to End Tests

on:
  pull_request:

env:
  TAR_PATH: docker-image.tar
  ARTIFACT_NAME: tar-docker-image

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: noble-forwarding-simd:local
          outputs: type=docker, dest=${{ env.TAR_PATH }}

      - name: Publish Tarball as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.TAR_PATH }}

  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Install Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'

      - name: Generate Matrix
        id: set-matrix
        run: |
          # Run the command and convert its output to a JSON array
          TESTS=$(cd e2e && go test -list . | grep -v "^ok " | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=${TESTS}" >> $GITHUB_OUTPUT

  test:
    needs:
      - build
      - prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # names of `make` commands to run tests
        test: ${{fromJson(needs.prepare.outputs.matrix)}}
      fail-fast: false

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Install Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'

      - name: Download Tarball Artifact
        uses: actions/download-artifact@v5
        with:
          name: ${{ env.ARTIFACT_NAME }}

      - name: Load Docker Image
        run: docker image load -i ${{ env.TAR_PATH }}

      - name: Run Tests
        run: cd e2e && go test -race -v -timeout 15m -run ^${{ matrix.test }}$ .
